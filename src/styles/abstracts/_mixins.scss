// Fluid Typography

@function strip-unit($value) {
    @return $value / ($value * 0 + 1);
}

@mixin fluid-type($min-vw, $max-vw, $min-font-size, $max-font-size) {
    $u1: unit($min-vw);
    $u2: unit($max-vw);
    $u3: unit($min-font-size);
    $u4: unit($max-font-size);

    @if $u1 == $u2 and $u1 == $u3 and $u1 == $u4 {
        & {
            font-size: $min-font-size;
            @media screen and (min-width: $min-vw) {
            font-size: calc(#{$min-font-size} + #{strip-unit($max-font-size - $min-font-size)} * ((100vw - #{$min-vw}) / #{strip-unit($max-vw - $min-vw)}));
            }
            @media screen and (min-width: $max-vw) {
            font-size: $max-font-size;
            }
        }
    }
}

/*
$min_width: 320px;
$max_width: 1200px;
$min_font: 16px;
$max_font: 24px;

html {
    @include fluid-type($min_width, $max_width, $min_font, $max_font);
}
*/

// Media Queries for Mobile-First

$breakpoints: (
    "xs": 25em, // 400px
    "sm": 34em, // 544px
    "md": 48em, // 768px
    "1g": 69em, // 960px
    "xl": 80em, // 1280px
    "od": 90em // 1449px
);

@mixin respond-above($breakpoint) {
    // If the breakpoint exists in the map
    @if map-has-key($breakpoints, $breakpoint) {
        // Get the breakpoint value
        $breakpoint-value: map-get($breakpoints, $breakpoint);
        // Write the media query
        @media (min-width: $breakpoint-value) {
            @content;
        }
        // If the breakpoint doesn't exist in the map
    }
    @else {
        //Log a warning
        @warn "No such breakpoint: #{$breakpoint}";
    }
}

// Flexbox Toolkit

@mixin flex($direction, $wrap, $justify, $align) {
    display: flex;
    flex-direction: $direction;
    flex-wrap: $wrap;
    justify-content: $justify;
    align-items: $align;
}